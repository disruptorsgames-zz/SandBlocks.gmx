<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_world</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set a width and height for each item
blockWidth = 64;
blockHeight = 64;

// create the grid (16x12)
blocks = ds_grid_create(room_width / blockWidth, room_height / blockHeight);
width = ds_grid_width(blocks);
height = ds_grid_height(blocks);
// basic variables
ground = height / 2;

// baseline
for (i = 0; i &lt; width; i += 1)
{
    for (j = 0; j &lt; height; j += 1)
    {
        // ground
        if (j == ground)
            val = createBlock(i, j, 2);
        // bottom
        else if (j == height - 1)
            val = createBlock(i, j, 1);
        // middle (exlude last)
        else if (j &gt; ground &amp;&amp; j &lt; height - 1)
            val = createBlock(i, j, choose(3, 3, 3, 4));
        // sky
        else
            val = 0;
        
        ds_grid_set(blocks, i, j, val);
    }
}

// create stone
/*X = irandom(width);
Y = irandom_range(ground + 2, height - 3);
ds_grid_set_disk(blocks, X, Y, 1, createBlock(X, Y, 4));*/

// create tree
//ds_grid_set_region(blocks, 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_shuffle(blocks);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; width; i += 1)
{
    for (j = 0; j &lt; height; j += 1)
    {
        block = ds_grid_get(blocks, i, j);
        color = c_white;
        
        switch (block) 
        {
            // obsidian
            case 1:
                color = c_fuchsia;
                break;
            // grass
            case 2:
                color = c_green;
                break;
            // dirt
            case 3: 
                color = make_color_rgb(121, 74, 38);
                break;
            // stone
            case 4:
                color = c_gray;
                break;
        }
        
        // only draw a rectangle for blocks...
        /*if (block &gt; 0)
        {
            dX = i * blockWidth;
            dY = j * blockHeight;
            draw_rectangle_color(dX, dY, dX + blockWidth, dY + blockHeight, color, color, color, color, 0);
        }*/
        
        // always draw text
        draw_set_color(c_black);
        draw_text(i * blockWidth, j * blockHeight, block);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
